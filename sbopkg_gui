#!/usr/bin/env python

__author__ = 'Gernot Walzl'
__date__ = '2016-12-04'
__license__ = '''
Copyright (c) 2016 Gernot Walzl

Redistribution and use of this script, with or without modification,
is permitted provided that the following conditions are met:

1. Redistributions of this script must retain the above copyright
   notice, this list of conditions and the following disclaimer.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
'''

import sys
import os
import codecs
from PyQt4.QtCore import Qt
from PyQt4.QtGui import QApplication
from PyQt4.QtGui import QMainWindow
from PyQt4.QtGui import QWidget
from PyQt4.QtGui import QToolBar
from PyQt4.QtGui import QAction
from PyQt4.QtGui import QSplitter
from PyQt4.QtGui import QVBoxLayout
from PyQt4.QtGui import QLabel
from PyQt4.QtGui import QLineEdit
from PyQt4.QtGui import QListWidget
from PyQt4.QtGui import QListWidgetItem
from PyQt4.QtGui import QTreeWidget
from PyQt4.QtGui import QTreeWidgetItem
from PyQt4.QtGui import QScrollArea
from PyQt4.QtGui import QMessageBox
from PyQt4.QtGui import QInputDialog
from PyQt4.QtGui import QSizePolicy


def read_config(cfg_sbopkg_gui):
    cfg_sbopkg_gui['slackbuilds_dir'] = '/var/lib/sbopkg/SBo'
    branches = list()
    if os.path.isdir(cfg_sbopkg_gui['slackbuilds_dir']):
        for name in os.listdir(cfg_sbopkg_gui['slackbuilds_dir']):
            if os.path.isdir(cfg_sbopkg_gui['slackbuilds_dir']+'/'+name):
                if os.path.isfile(cfg_sbopkg_gui['slackbuilds_dir']+'/'+name+'/SLACKBUILDS.TXT'):
                    branches.append(name)
    if len(branches) > 0:
        branches.sort()
        cfg_sbopkg_gui['slackbuilds_dir'] += '/'+branches[-1]
    cfg_sbopkg_gui['sbo_tag'] = '_SBo'
    cfg_sbopkg_gui['packages_dir'] = '/var/log/packages'
    cfg_sbopkg_gui['terminal_app'] = 'xterm -e '
    if os.path.isfile('/usr/bin/konsole'):
        cfg_sbopkg_gui['terminal_app'] = 'konsole --nofork -e '
    filename_conf = 'sbopkg_gui.conf.py'
    if os.path.isfile('/etc/sbopkg_gui/'+filename_conf):
        execfile('/etc/sbopkg_gui/'+filename_conf)


class SlackBuild:
    def __init__(self):
        self.name = ''
        self.location = ''
        self.version = ''
        self.requires = list()
        self.description = ''
        self.installed_version = ''
        self.installed_fullname = ''


class MainWindow(QMainWindow):

    def __init__(self):
        QMainWindow.__init__(self)

        self.slackbuilds = dict()

        self.setWindowTitle('sbopkg gui')
        self.resize(600, 400)

        self.qtoolbar = QToolBar(self)
        self.qaction_update = QAction('Update', self)
        self.qaction_update.triggered.connect(self.on_action_update)
        self.qtoolbar.addAction(self.qaction_update)
        self.qaction_upgrade = QAction('Upgrade', self)
        self.qaction_upgrade.triggered.connect(self.on_action_upgrade)
        self.qtoolbar.addAction(self.qaction_upgrade)
        self.qtoolbar.addSeparator()
        self.qaction_install = QAction('Install', self)
        self.qaction_install.triggered.connect(self.on_action_install)
        self.qaction_install.setEnabled(False)
        self.qtoolbar.addAction(self.qaction_install)
        self.qaction_remove = QAction('Remove', self)
        self.qaction_remove.triggered.connect(self.on_action_remove)
        self.qaction_remove.setEnabled(False)
        self.qtoolbar.addAction(self.qaction_remove)
        self.qaction_options = QAction('Options', self)
        self.qaction_options.triggered.connect(self.on_action_options)
        self.qaction_options.setEnabled(False)
        self.qtoolbar.addAction(self.qaction_options)
        widget_empty = QWidget(self)
        widget_empty.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.qtoolbar.addWidget(widget_empty)
        self.qaction_about = QAction('About', self)
        self.qaction_about.triggered.connect(self.on_action_about)
        self.qtoolbar.addAction(self.qaction_about)
        self.addToolBar(Qt.TopToolBarArea, self.qtoolbar)

        self.qwidget_central = QSplitter(self)
        self.setCentralWidget(self.qwidget_central)

        self.qwidget_left = QWidget(self.qwidget_central)
        self.qlayout_left = QVBoxLayout(self.qwidget_left)
        self.qlineedit_search = QLineEdit(self.qwidget_left)
        self.qlineedit_search.textChanged.connect(self.update_qtree_slackbuilds)
        self.qlayout_left.addWidget(self.qlineedit_search)
        self.qlist_categories = QListWidget(self.qwidget_central)
        self.qlist_categories.itemSelectionChanged.connect(self.update_qtree_slackbuilds)
        self.qlayout_left.addWidget(self.qlist_categories)
        self.qwidget_central.addWidget(self.qwidget_left)
        self.qwidget_central.setStretchFactor(0, 1)

        self.qwidget_right = QSplitter(Qt.Vertical, self.qwidget_central)
        self.qtree_slackbuilds = QTreeWidget(self.qwidget_right)
        self.qtree_slackbuilds.itemSelectionChanged.connect(self.on_qtree_slackbuilds_selection_changed)
        self.qtree_slackbuilds.itemDoubleClicked.connect(self.on_qtree_slackbuilds_double_clicked)
        header = QTreeWidgetItem(['Package', 'Version', 'Installed', 'Description'])
        self.qtree_slackbuilds.setHeaderItem(header)
        self.qtree_slackbuilds.setRootIsDecorated(False)
        self.qtree_slackbuilds.sortByColumn(0, Qt.AscendingOrder)
        self.qwidget_right.addWidget(self.qtree_slackbuilds)
        qwidget_desc = QWidget(self.qwidget_right)
        qlayout_desc = QVBoxLayout(qwidget_desc)
        qscrollarea = QScrollArea(qwidget_desc)
        self.qlabel_readme = QLabel(qscrollarea)
        self.qlabel_readme.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.qlabel_readme.setText('(README)')
        qscrollarea.setWidget(self.qlabel_readme)
        qscrollarea.setWidgetResizable(True)
        qlayout_desc.addWidget(qscrollarea)
        self.qlabel_requires = QLabel(qwidget_desc)
        self.qlabel_requires.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Preferred)
        self.qlabel_requires.hide()
        qlayout_desc.addWidget(self.qlabel_requires)
        self.qlabel_homepage = QLabel(qwidget_desc)
        self.qlabel_homepage.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Preferred)
        self.qlabel_homepage.setOpenExternalLinks(True)
        self.qlabel_homepage.setText('<a href="http://slackbuilds.org/">http://slackbuilds.org/</a>')
        qlayout_desc.addWidget(self.qlabel_homepage)
        self.qlabel_maintainer = QLabel(qwidget_desc)
        self.qlabel_maintainer.setSizePolicy(QSizePolicy.Ignored, QSizePolicy.Preferred)
        self.qlabel_maintainer.setTextInteractionFlags(Qt.TextSelectableByMouse)
        qlayout_desc.addWidget(self.qlabel_maintainer)
        self.qwidget_right.addWidget(qwidget_desc)
        self.qwidget_central.addWidget(self.qwidget_right)
        self.qwidget_central.setStretchFactor(1, 3)

        self.init_slackbuilds()
        self.update_qlist_categories()
        self.update_qtree_slackbuilds()


    def init_slackbuilds(self):
        self.slackbuilds = dict()
        filename_slackbuilds = cfg['slackbuilds_dir']+'/SLACKBUILDS.TXT'
        try:
            with open(filename_slackbuilds, 'r') as f_slackbuilds:
                slackbuild = SlackBuild()
                for line in f_slackbuilds:
                    if line.startswith('SLACKBUILD NAME:'):
                        if slackbuild.name:
                            self.slackbuilds[slackbuild.name] = slackbuild
                            slackbuild = SlackBuild()
                        slackbuild.name = line[16:].strip()
                    elif line.startswith('SLACKBUILD LOCATION:'):
                        slackbuild.location = line[20:].strip()
                    elif line.startswith('SLACKBUILD VERSION:'):
                        slackbuild.version = line[19:].strip()
                    elif line.startswith('SLACKBUILD REQUIRES:'):
                        slackbuild.requires = line[20:].strip().split()
                    elif line.startswith('SLACKBUILD SHORT DESCRIPTION:'):
                        slackbuild.description = line[29:].strip()
                if slackbuild.name:
                    self.slackbuilds[slackbuild.name] = slackbuild
        except IOError as err:
            print('IOError: ' + str(err))
            QMessageBox.critical(self, 'Error',
                    'Unable to open '+filename_slackbuilds,
                    QMessageBox.Cancel, QMessageBox.Cancel)

        for pkg in os.listdir(cfg['packages_dir']):
            elements = pkg.split('-')
            name = elements[0]
            for i in range(1, len(elements)-3):
                name += '-' + elements[i]
            if name in self.slackbuilds:
                version = ''
                try:
                    version = elements[len(elements)-3]
                except IndexError:
                    pass
                self.slackbuilds[name].installed_version = version
                self.slackbuilds[name].installed_fullname = pkg


    def get_search_text(self):
        return str(self.qlineedit_search.text())


    def get_selected_category(self):
        result = None
        if len(self.qlist_categories.selectedItems()) > 0:
            qitem = self.qlist_categories.selectedItems()[0]
            result = str(qitem.text())
        return result


    def get_selected_slackbuild_name(self):
        result = None
        if len(self.qtree_slackbuilds.selectedItems()) > 0:
            qitem = self.qtree_slackbuilds.selectedItems()[0]
            result = str(qitem.text(0))
        return result


    def update_qlist_categories(self):
        categories = list()
        categories.append('(all)')
        categories.append('(installed)')
        for path in os.listdir(cfg['slackbuilds_dir']):
            if os.path.isdir(cfg['slackbuilds_dir']+'/'+path):
                categories.append(path)
        categories.sort()
        self.qlist_categories.clear()
        for category in categories:
            qitem = QListWidgetItem(category)
            self.qlist_categories.addItem(qitem)


    def update_qtree_slackbuilds(self):
        search = self.get_search_text()
        category = self.get_selected_category()
        self.qtree_slackbuilds.setSortingEnabled(False)
        self.qtree_slackbuilds.clear()
        for name, slackbuild in self.slackbuilds.iteritems():
            if search:
                if search.lower() not in name.lower():
                    continue
            if category and category != '(all)' and category != '(installed)':
                if '/'+category+'/' not in slackbuild.location:
                    continue
            if category == '(installed)':
                if not slackbuild.installed_version:
                    continue
            qitem = QTreeWidgetItem([slackbuild.name,
                    slackbuild.version,
                    slackbuild.installed_version,
                    slackbuild.description])
            self.qtree_slackbuilds.addTopLevelItem(qitem)
        self.qtree_slackbuilds.setSortingEnabled(True)


    def on_qtree_slackbuilds_selection_changed(self):
        sb_name = self.get_selected_slackbuild_name()
        if sb_name:
            slackbuild = self.slackbuilds[sb_name]
            self.qaction_install.setEnabled(True)
            self.qaction_options.setEnabled(True)
            if slackbuild.installed_version:
                self.qaction_remove.setEnabled(True)
            else:
                self.qaction_remove.setEnabled(False)
            readme = ''
            filename_readme = cfg['slackbuilds_dir']+'/'+slackbuild.location+'/README'
            try:
                with codecs.open(filename_readme, 'r', 'utf-8') as f_readme:
                    readme = f_readme.read()
            except IOError as err:
                print('IOError: ' + str(err))
                readme = 'Error: Unable to open '+filename_readme
            self.qlabel_readme.setText(readme)
            str_requires = ''
            for require in slackbuild.requires:
                installed = False;
                if require in self.slackbuilds:
                    if self.slackbuilds[require].installed_version:
                        installed = True;
                if installed:
                    str_requires += '<font color="green">'+require+'</font> '
                else:
                    str_requires += require+' '
            self.qlabel_requires.setText('Requires: '+str_requires)
            if str_requires:
                self.qlabel_requires.show()
            else:
                self.qlabel_requires.hide()
            homepage = ''
            maintainer = ''
            email = ''
            filename_info = cfg['slackbuilds_dir']+'/'+slackbuild.location+'/'+sb_name+'.info'
            try:
                with codecs.open(filename_info, 'r', 'utf-8') as f_info:
                    for line in f_info:
                        line = line.strip()
                        if line.startswith('HOMEPAGE='):
                            homepage=line[10:-1]
                        elif line.startswith('MAINTAINER='):
                            maintainer=line[12:-1]
                        elif line.startswith('EMAIL='):
                            email=line[7:-1]
            except IOError as err:
                print('IOError: ' + str(err))
            self.qlabel_homepage.setText('Homepage: <a href="'+homepage+'">'+homepage+'</a>')
            self.qlabel_maintainer.setText('Maintainer: '+maintainer+' <'+email+'>')
        else:
            self.qaction_install.setEnabled(False)
            self.qaction_remove.setEnabled(False)
            self.qaction_options.setEnabled(False)
            self.qlabel_readme.setText('(README)')
            self.qlabel_requires.setText('')
            self.qlabel_requires.hide()
            self.qlabel_homepage.setText('')
            self.qlabel_maintainer.setText('')


    def on_qtree_slackbuilds_double_clicked(self):
        sb_name = self.get_selected_slackbuild_name()
        if sb_name:
            slackbuild = self.slackbuilds[sb_name]
            os.system('xdg-open "'+cfg['slackbuilds_dir']+'/'+slackbuild.location+'"')


    def get_requires_rec(self, sb_name):
        result = list()
        if sb_name in self.slackbuilds:
            slackbuild = self.slackbuilds[sb_name]
            for require in slackbuild.requires:
                if not require.startswith('%'):
                    result += self.get_requires_rec(require)
                    result.append(require)
        return result


    def filter_installed(self, requires):
        result = list()
        for require in requires:
            if require in self.slackbuilds:
                if not self.slackbuilds[require].installed_version:
                    result.append(require)
        return result


    def show_readmes(self, sb_names):
        for sb_name in sb_names:
            if sb_name in self.slackbuilds:
                slackbuild = self.slackbuilds[sb_name]
                if '%README%' in slackbuild.requires:
                    readme = ''
                    filename_readme = cfg['slackbuilds_dir']+'/'+slackbuild.location+'/README'
                    try:
                        with codecs.open(filename_readme, 'r', 'utf-8') as f_readme:
                            readme = f_readme.read()
                    except IOError as err:
                        print('IOError: ' + str(err))
                    if readme:
                        QMessageBox.information(self, 'README '+sb_name, readme)


    def on_action_update(self):
        os.system(cfg['terminal_app'] + ' sudo /usr/sbin/sbopkg -r')
        self.init_slackbuilds()
        self.update_qlist_categories()
        self.update_qtree_slackbuilds()


    def on_action_upgrade(self):
        upgrades = list()
        for name, slackbuild in self.slackbuilds.iteritems():
            if slackbuild.installed_version:
                if slackbuild.installed_fullname.endswith(cfg['sbo_tag']):
                    slackbuild_build = 1
                    filename_slackbuild = cfg['slackbuilds_dir']+'/'+slackbuild.location+'/'+name+'.SlackBuild'
                    try:
                        with open(filename_slackbuild, 'r') as f_slackbuild:
                            for line in f_slackbuild:
                                line = line.strip()
                                if line.startswith('BUILD='):
                                    try:
                                        slackbuild_build = int(line[15:-1])
                                    except ValueError as err:
                                        print('ValueError: ' + str(err))
                                        slackbuild_build = 1
                                    break
                    except IOError as err:
                        print('IOError: ' + str(err))
                    if slackbuild.version != slackbuild.installed_version or \
                            not slackbuild.installed_fullname.endswith(str(slackbuild_build) + cfg['sbo_tag']):
                        upgrades.append(name)
        if len(upgrades) > 0:
            requires = list()
            for upgrade in upgrades:
                requires += self.get_requires_rec(upgrade)
            requires = self.filter_installed(requires)
            cmd = 'sudo /usr/sbin/sbopkg -i '
            if len(requires) > 0:
                cmd += '"'+' '.join(requires)+' '+' '.join(upgrades)+'"'
            else:
                cmd += '"'+' '.join(upgrades)+'"'
            msg = 'Newer versions of the following packages are available:\n'
            msg += ' '.join(upgrades)+'\n'
            if len (requires) > 0:
                msg += '\n'
                msg += 'The following additional packages need to be installed:\n'
                msg += ' '.join(requires)+'\n'
            msg += '\n'
            msg += 'Do you want to execute the following command?\n'
            msg += cmd+'\n'
            ret = QMessageBox.question(self, 'Upgrade', msg,
                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
            if ret == QMessageBox.Yes:
                os.system(cfg['terminal_app'] + ' ' + cmd)
                self.init_slackbuilds()
                self.update_qtree_slackbuilds()
        else:
            QMessageBox.information(self, 'Upgrade', 'No upgrades found.')


    def on_action_install(self):
        sb_name = self.get_selected_slackbuild_name()
        requires = self.get_requires_rec(sb_name)
        requires = self.filter_installed(requires)
        self.show_readmes(requires + [sb_name])
        cmd = 'sudo /usr/sbin/sbopkg -i '
        if len(requires) > 0:
            cmd += '"'+' '.join(requires)+' '+sb_name+'"'
        else:
            cmd += sb_name
        msg = ''
        warning = False
        installed_fullname = self.slackbuilds[sb_name].installed_fullname
        if installed_fullname and not installed_fullname.endswith(cfg['sbo_tag']):
            warning = True
            msg += sb_name + ' was installed from another source.\n'
            msg += 'Package: ' + installed_fullname + '\n'
            msg += '\n'
            msg += 'Do you want to build and install ' + sb_name + ' anyway?\n'
            msg += '(not recommended)\n'
        else:
            msg += 'Do you want to build and install ' + sb_name + '?\n'
        if len(requires) > 0:
            msg += '\n'
            msg += sb_name+' requires the following additional packages to be installed:\n'
            msg += ' '.join(requires)+'\n'
        msg += '\n'
        msg += 'Do you want to execute the following command?\n'
        msg += cmd+'\n'
        ret = QMessageBox.No
        if warning:
            ret = QMessageBox.warning(self, 'Install '+sb_name, msg,
                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        else:
            ret = QMessageBox.question(self, 'Install '+sb_name, msg,
                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
        if ret == QMessageBox.Yes:
            os.system(cfg['terminal_app'] + ' ' + cmd)
            self.init_slackbuilds()
            self.update_qtree_slackbuilds()


    def on_action_remove(self):
        sb_name = self.get_selected_slackbuild_name()
        required_by = list()
        for name, slackbuild in self.slackbuilds.iteritems():
            if slackbuild.installed_version:
                if sb_name in slackbuild.requires:
                    required_by.append(slackbuild.name)
        if len(required_by) > 0:
            msg = sb_name+' is required by the following packages:\n'
            msg += ' '.join(required_by)+'\n'
            QMessageBox.critical(self, 'Remove '+sb_name, msg,
                    QMessageBox.Cancel, QMessageBox.Cancel)
        else:
            cmd = 'sudo /sbin/removepkg '+sb_name
            msg = ''
            warning = False
            installed_fullname = self.slackbuilds[sb_name].installed_fullname
            if installed_fullname and not installed_fullname.endswith(cfg['sbo_tag']):
                warning = True
                msg += sb_name + ' was installed from another source.\n'
                msg += 'Package: ' + installed_fullname + '\n'
                msg += '\n'
                msg += 'Do you want to remove ' + sb_name + ' anyway?\n'
                msg += '(not recommended)\n'
            else:
                msg += 'Do you want to remove '+sb_name+'?\n'
            msg += '\n'
            msg += 'Do you want to execute the following command?\n'
            msg += cmd+'\n'
            ret = QMessageBox.No
            if warning:
                ret = QMessageBox.warning(self, 'Remove '+sb_name, msg,
                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            else:
                ret = QMessageBox.question(self, 'Remove '+sb_name, msg,
                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if ret == QMessageBox.Yes:
                os.system(cfg['terminal_app'] + ' ' + cmd)
                self.init_slackbuilds()
                self.update_qtree_slackbuilds()


    def on_action_options(self):
        sb_name = self.get_selected_slackbuild_name()
        slackbuild = self.slackbuilds[sb_name]
        options = ''
        filename_options = cfg['slackbuilds_dir']+'/'+slackbuild.location+'/options.sbopkg'
        try:
            with open(filename_options, 'r') as f_options:
                options = f_options.read()
        except IOError:
            pass
        (text, ok) = QInputDialog.getText(self, sb_name, 'Options:', QLineEdit.Normal, options)
        if ok:
            options = str(text)
            cmd = 'sudo bash -c "echo -n \''+options+'\' > '+filename_options+'"'
            msg = 'Do you want to execute the following command?\n'
            msg += cmd + '\n'
            ret = QMessageBox.question(self, 'Options '+sb_name, msg,
                    QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
            if ret == QMessageBox.Yes:
                os.system(cfg['terminal_app'] + ' ' + cmd)


    def on_action_about(self):
        msg = 'sbopkg gui\n'+__date__+'\n'+__license__
        QMessageBox.about(self, 'About sbopkg gui', msg)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    cfg = dict()
    read_config(cfg)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
